import os
import glob
import random
import hashlib
import pandas as pd
from cryptography import x509
import xml.etree.ElementTree as ET
from cryptography.hazmat.backends import default_backend


class Mapping_DCMs_And_DERs:
    '''
    Why do we need this script?
    
    DCMs are the DERs' interface. Each DCM needs to be mapped with its associated DER. The file EGoT_der_psu.txt 
    contains all the DERs that are going to be injected to the model. 

    The DCMs certificates are initialized by DERMs. As of today (06/25/2023), we want to generate a small
    number of certificates, and therefore, insert a small number of DERs, to test ME-DERMS integration and
    acknowledge any potential issues.

    What does this script do?
        - DOs:
            1- Checks how many certificates are generated.
            2- Get DCMs LFDIs.
            3- Obtains DER buses from DERs_full_list.txt in DERScripts. 
            4- Configure the EGoT13_der_psu.txt file with DERs, buses, and other attributes.
        
        - DON'Ts:
            1- This script does not generate DCMs certificates.
            2- Besides configuring the EGoT13_der_psu.txt, this script SHALL NOT interact with GridAPPS-D
            whatsoever. (See initialize_der_ems.sh in ME main directory for other config files)
    
    What are steps sequence for the initial testing?

        - Test Engineer chooses the number of DERs (DER_N) for testing.
        - DERMS generates ssl certificates.
        - DERMS updates registration index.
        - This script checks the number of the generated certificates
        - This script configures the EGoT13_der_psu.txt
    '''
    
    def __init__(self):
        
        # Set ME Paths:
        self.me_dir = "/home/deras/Desktop/midrar_work_github/doe-egot-me"

        # Set DERMS Paths:
        self.derms_dir = "/home/deras/Desktop/midrar_work_github/doe-egot-system"
        
        # DER names and buses:
        self.ders_names = []

        # Digesting LFDIs from each certificate:
        self.lfdis = []

    def GetCertificates(self):
        """
        Checks how many certificates are generated by DERMS.
        """
        self.certs = [certs for certs in os.listdir(f"{self.derms_dir}/ssl/root-ca/") if
                      certs.startswith("client") and 
                      certs.endswith("crt")]

    def GetLFDIs(self):
        """
        Import LFDIs from each certificate file. Will be used later to map DERs with each client.
        """
        
        for file in self.certs:
            data = open(f"{self.derms_dir}/ssl/root-ca/{file}","rb")
            crt_file = data.read()
            sha_hash = hashlib.sha256(crt_file).digest()
            self.lfdis.append(sha_hash[:20].hex())


    def Open_EGoT13_Der_File(self):
        """
        Open the full list of DERs file. Grab feeder mRID, headers, and all buses within the model.
        """
        der_file = pd.read_csv(f"{self.me_dir}/support/config_files/DERs_full_list.txt", sep="\t")

        for index, row in der_file.iterrows():
            if row.values[0].startswith("feederID"):
                self.feeder_id = row.values[0]
            elif row.values[0].startswith("//name"):
                self.headers = row.values[0]
            else:
                self.ders_names.append(row.values[0])

    def randomize_ders_and_trim_der_list(self):
        """
        This is just a preferance. The full der file contains all ders for the first node, all ders for the second node,
        and so forth. In this function, we'll just make sure that each LFDI assigned to a unique DER (location wise). For example, each LFDI should be
        assigned to a unique node. 
        """
        random.shuffle(self.ders_names)
        self.ders_names = self.ders_names[:len(self.lfdis)]
        # self.ders_names = self.ders_names[:2]

    def clear_rwhder_files(self):
        '''
        Check if LFDI has been already assigned to a DER. If so, remove the file and assign the LFDI
        to a new DER.
        '''
        filelist = glob.glob(self.me_dir+'/RWHDERS_Inputs/*.csv')
        clear_dir = [os.remove(files) for files in filelist]

    def assign_LFDIs_and_DERs(self):
        """
        There are no restrictions in terms of what LFDI should be assigned to which DER. In this function, we create
        the csv input file names and assign each DER its own unique LFDI.
        """
        
        for der in range(len(self.ders_names)):
            der_bus = self.ders_names[der].split(",")[1]
            rwh_file_name = f"DER{self.lfdis[der]}_Bus{der_bus}.csv"
            self.WriteNewDERsFile(line="P,0", file_name=rwh_file_name)

    def MapDERsAndBuses(self):
        self.GetCertificates()
        self.GetLFDIs()
        self.Open_EGoT13_Der_File()
        self.randomize_ders_and_trim_der_list()
        self.clear_rwhder_files()
        self.assign_LFDIs_and_DERs()
        

    def WriteNewDERsFile(self, line, file_name):
        
        der_file = open(f"{self.me_dir}/RWHDERS_Inputs/{file_name}", "w")
        print(line, file=der_file)
        der_file.close()

if __name__ == '__main__':
    maps = Mapping_DCMs_And_DERs()
    maps.MapDERsAndBuses()