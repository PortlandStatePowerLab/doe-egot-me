import os
import csv
import pandas as pd
from cryptography import x509
import xml.etree.ElementTree as ET
from cryptography.hazmat.backends import default_backend


class Mapping_DCMs_And_DERs:
    '''
    Why do we need this script?
    
    DCMs are the DERs' interface. Each DCM needs to be mapped with its associated DER. The file EGoT_der_psu.txt 
    contains all the DERs that are going to be injected to the model. 

    The DCMs certificates are initialized by DERMs. As of today (06/25/2023), we want to generate a small
    number of certificates, and therefore, insert a small number of DERs, to test ME-DERMS integration and
    acknowledge any potential issues.

    What does this script do?
        - DOs:
            1- Checks how many certificates are generated.
            2- Get DCMs LFIDs.
            3- Obtains DER buses from OpenDSS xml file to avoid any adding DERs to non-existent buses.
            4- Configure the EGoT13_der_psu.txt file with DERs, buses, and other attributes.
        
        - DON'Ts:
            1- This script does not generate DCMs certificates.
            2- Besides configuring the EGoT13_der_psu.txt, this script SHALL NOT interact with GridAPPS-D
            whatsoever. (See initialize_der_ems.sh in ME main directory for other config files)
    
    What are steps sequence for the initial testing?

        - Test Engineer chooses the number of DERs (DER_N) for testing.
        - DERMS generates ssl certificates.
        - DERMS updates registration index.
        - This script checks the number of the generated certificates
        - This script configures the EGoT13_der_psu.txt
    '''
    
    def __init__(self):
        
        # Set ME Paths:
        self.main_dir = os.getcwd()
        self.dss_dir = "../dss_files"
        self.ders_config_file_dir = "../DERScripts"

        # Set DERMS Paths:
        self.derms_dir = "/home/deras/Desktop/midrar_work_github/doe-egot-system"
        
        # DER names and buses:
        self.ders_names = []

    def GetCertificates(self):
        """
        Checks how many certificates are generated by DERMS.
        """
        self.certs = [certs for certs in os.listdir(f"{self.derms_dir}/ssl/root-ca/") if
                      certs.startswith("client") and 
                      certs.endswith("crt")]

    def GetLFIDs(self):
        """
        Import LFDIs from each certificate file. Will be used later to map DERs with each client.
        """
        self.lfids = [lfid for lfid in os.listdir(f"{self.derms_dir}/ssl/root-ca/certs/")]

    def MapDERsAndBuses(self):
        self.open_egot13_der_psu_file()
        self.GetCertificates()

        df = pd.read_csv(f"{self.ders_config_file_dir}/DERs_full_list.txt", sep="\t")
        for index, row in df.iterrows():
            if row.values[0].startswith("feederID"):
                self.WriteNewDERsFile(line= row.values[0])
            elif row.values[0].startswith("//name"):
                self.WriteNewDERsFile(line=row.values[0])
            else:
                self.ders_names.append(row.values[0])
        
        self.ders_names = self.ders_names[:len(self.certs)]

        for rows in self.ders_names:
            self.WriteNewDERsFile(line=rows)
        
    def open_egot13_der_psu_file(self):
        self.ders_file = open(f"test.txt", "w")

    def WriteNewDERsFile(self, line):
        
        print(line, file=self.ders_file)

if __name__ == '__main__':
    maps = Mapping_DCMs_And_DERs()
    maps.MapDERsAndBuses()